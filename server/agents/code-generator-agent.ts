import { BaseAgent, type AgentTask } from './base-agent';
import { LLMService } from '../services/llm-service';
import { ProjectService } from '../services/project-service';
import { GitService } from '../services/git-service';
import fs from 'fs/promises';
import path from 'path';

interface CodeGenerationTask {
  projectId: number;
  projectType: string;
  name: string;
  config: any;
}

export class CodeGeneratorAgent extends BaseAgent {
  private llmService: LLMService;
  private projectService: ProjectService;
  private gitService: GitService;

  constructor(agentId: number) {
    super(agentId);
    this.llmService = new LLMService();
    this.projectService = new ProjectService();
    this.gitService = new GitService();
  }

  protected async executeTask(task: AgentTask): Promise<void> {
    switch (task.type) {
      case 'generate_project':
        await this.generateProject(task.payload as CodeGenerationTask);
        break;
      case 'analyze_code':
        await this.analyzeCode(task.payload);
        break;
      case 'generate_tests':
        await this.generateTests(task.payload);
        break;
      default:
        throw new Error(`Unknown task type: ${task.type}`);
    }
  }

  private async generateProject(task: CodeGenerationTask): Promise<void> {
    const { projectId, projectType, name, config } = task;
    
    await this.log('info', `Generating ${projectType} project: ${name}`);
    await this.updateProgress(10);

    // Generate project structure using LLM
    const projectStructure = await this.llmService.generateProjectStructure(projectType, config);
    await this.updateProgress(30);

    // Create project directory
    const projectPath = path.join(process.cwd(), 'generated_projects', name);
    await fs.mkdir(projectPath, { recursive: true });
    await this.updateProgress(40);

    // Generate files based on structure
    for (const file of projectStructure.files) {
      const filePath = path.join(projectPath, file.path);
      const fileDir = path.dirname(filePath);
      
      await fs.mkdir(fileDir, { recursive: true });
      
      // Generate file content using LLM
      const content = await this.llmService.generateFileContent(
        file.path, 
        file.type, 
        projectType, 
        config
      );
      
      await fs.writeFile(filePath, content);
      await this.log('info', `Generated file: ${file.path}`);
    }
    await this.updateProgress(70);

    // Initialize Git repository if requested
    if (config.autoGit) {
      await this.gitService.initRepository(projectPath);
      await this.gitService.addAll(projectPath);
      await this.gitService.commit(projectPath, 'Initial commit - Generated by LLM Agent');
      await this.updateProgress(80);
    }

    // Update project status
    await this.projectService.updateProject(projectId, {
      status: 'generated',
      updatedAt: new Date()
    });

    await this.updateProgress(100);
    await this.createActivity(
      'project_generated',
      `${projectType} project created`,
      `Successfully generated ${name} with ${projectStructure.files.length} files`,
      projectId
    );
  }

  private async analyzeCode(payload: { projectId: number; filePath: string }): Promise<void> {
    const { projectId, filePath } = payload;
    
    await this.log('info', `Analyzing code in ${filePath}`);
    
    const content = await fs.readFile(filePath, 'utf-8');
    const analysis = await this.llmService.analyzeCode(content, filePath);
    
    await this.createActivity(
      'code_analyzed',
      'Code analysis completed',
      `Analyzed ${filePath}: ${analysis.summary}`,
      projectId
    );
  }

  private async generateTests(payload: { projectId: number; sourceFile: string }): Promise<void> {
    const { projectId, sourceFile } = payload;
    
    await this.log('info', `Generating tests for ${sourceFile}`);
    
    const sourceContent = await fs.readFile(sourceFile, 'utf-8');
    const testContent = await this.llmService.generateTests(sourceContent, sourceFile);
    
    const testFile = sourceFile.replace(/\.(js|ts|py)$/, '.test.$1');
    await fs.writeFile(testFile, testContent);
    
    await this.createActivity(
      'tests_generated',
      'Test suite generated',
      `Created tests for ${sourceFile}`,
      projectId
    );
  }
}
